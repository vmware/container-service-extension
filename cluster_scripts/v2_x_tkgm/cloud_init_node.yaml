#cloud-config
write_files:
- path: /root/kubeadm-defaults-join.conf
  owner: root
  content: |
    ---
    apiVersion: kubeadm.k8s.io/v1beta2
    kind: JoinConfiguration
    caCertPath: /etc/kubernetes/pki/ca.crt
    discovery:
      bootstrapToken:
        apiServerEndpoint: {ip_port}
        token: {token}
        unsafeSkipCAVerification: false
        caCertHashes: [{discovery_token_ca_cert_hash}]
      timeout: 5m0s
    nodeRegistration:
      criSocket: /run/containerd/containerd.sock
      kubeletExtraArgs:
        cloud-provider: external
    ---
- path: /root/node.sh
  owner: root
  content: |
    #!/usr/bin/env bash

    catch() {{
       vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_status $?"
       error_message="$(date) $(caller): $BASH_COMMAND"
       echo "$error_message" &>> /var/log/cse/customization/error.log
       vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_failure_reason $error_message"
    }}

    mkdir -p /var/log/cse/customization

    trap 'catch $? $LINENO' ERR

    set -ex

    vmtoolsd --cmd "info-set guestinfo.postcustomization.networkconfiguration.status in_progress"
      echo 'net.ipv6.conf.all.disable_ipv6 = 1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.default.disable_ipv6 = 1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.lo.disable_ipv6 = 1' >> /etc/sysctl.conf
      sudo sysctl -p

      # also remove ipv6 localhost entry from /etc/hosts
      sed -i 's/::1/127.0.0.1/g' /etc/hosts || true
    vmtoolsd --cmd "info-set guestinfo.postcustomization.networkconfiguration.status successful"


    vmtoolsd --cmd "info-set guestinfo.postcustomization.store.sshkey.status in_progress"
      ssh_key="{ssh_key}"
      if [[ ! -z "$ssh_key" ]];
      then
        mkdir -p /root/.ssh
        echo $ssh_key >> /root/.ssh/authorized_keys
        chmod -R go-rwx /root/.ssh
      fi
    vmtoolsd --cmd "info-set guestinfo.postcustomization.store.sshkey.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.proxy.setting.status in_progress"
    export HTTP_PROXY="{http_proxy}"
    export HTTPS_PROXY="{https_proxy}"
    export http_proxy="{http_proxy}"
    export https_proxy="{https_proxy}"
    export NO_PROXY="{no_proxy}"
    export no_proxy="{no_proxy}"

    mkdir -p /etc/systemd/system/containerd.service.d
    cat <<END > /etc/systemd/system/containerd.service.d/http-proxy.conf
    [Service]
    Environment="HTTP_PROXY={http_proxy}"
    Environment="HTTPS_PROXY={https_proxy}"
    Environment="http_proxy={http_proxy}"
    Environment="https_proxy={https_proxy}"
    Environment="no_proxy={no_proxy}"
    Environment="NO_PROXY={no_proxy}"
    END
    systemctl daemon-reload
    systemctl restart containerd
    vmtoolsd --cmd "info-set guestinfo.postcustomization.proxy.setting.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubeadm.node.join.status in_progress"
      # tag images
      for image in "coredns" "etcd" "kube-proxy" "kube-apiserver" "kube-controller-manager" "kube-scheduler"
      do
        image_ref=$(ctr -n=k8s.io image list | cut -d" " -f1 | grep $image)
        ref_path=$(echo $image_ref | sed 's/:.*//')
        new_tag_version=$(echo $image_ref | sed 's/.*://' | sed 's/_/-/')
        ctr -n=k8s.io image tag $image_ref $ref_path:$new_tag_version
      done

      kubeadm join --config /root/kubeadm-defaults-join.conf --v=10 &> /root/kubeadm-join.out
    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubeadm.node.join.status successful"

    echo "$(date) post customization script execution completed" &>> /var/log/cse/customization/status.log

    exit 0
runcmd:
- bash /root/node.sh
timezone: UTC
disable_root: false
preserve_hostname: false
hostname: {vm_host_name}
final_message: "The system is ready after $UPTIME seconds"
