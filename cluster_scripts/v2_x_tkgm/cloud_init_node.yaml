#cloud-config
write_files:
- path: /root/kubeadm-defaults-join.conf
  owner: root
  content: |
    ---
    apiVersion: kubeadm.k8s.io/v1beta2
    kind: JoinConfiguration
    caCertPath: /etc/kubernetes/pki/ca.crt
    discovery:
      bootstrapToken:
        apiServerEndpoint: {ip_port}
        token: {token}
        unsafeSkipCAVerification: false
        caCertHashes: [{discovery_token_ca_cert_hash}]
      timeout: 5m0s
    nodeRegistration:
      criSocket: /run/containerd/containerd.sock
      kubeletExtraArgs:
        cloud-provider: external
    ---
- path: /root/node.sh
  owner: root
  content: |
    #!/usr/bin/env bash

    catch() {{
      kubeconfig_path=/root/kubeconfig.yaml
      if [[ -f "$kubeconfig_path" ]]; then
        rm $kubeconfig_path
      fi
      # ensure kubeconfig is null, even if this worker doesn't use the kubeconfig to avoid
      # getting the config if the value is not set
      vmtoolsd --cmd "info-set guestinfo.postcustomization.control_plane.kubeconfig null"

       vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_status $?"
       error_message="$(date) $(caller): $BASH_COMMAND"
       echo "$error_message" &>> /var/log/cse/customization/error.log
       vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_failure_reason $error_message"
    }}

    mkdir -p /var/log/cse/customization

    trap 'catch $? $LINENO' ERR

    set -ex

    vmtoolsd --cmd "info-set guestinfo.postcustomization.networkconfiguration.status in_progress"
      echo 'net.ipv6.conf.all.disable_ipv6 = 1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.default.disable_ipv6 = 1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.lo.disable_ipv6 = 1' >> /etc/sysctl.conf
      sudo sysctl -p

      # also remove ipv6 localhost entry from /etc/hosts
      sed -i 's/::1/127.0.0.1/g' /etc/hosts || true
    vmtoolsd --cmd "info-set guestinfo.postcustomization.networkconfiguration.status successful"


    vmtoolsd --cmd "info-set guestinfo.postcustomization.store.sshkey.status in_progress"
      ssh_key="{ssh_key}"
      if [[ ! -z "$ssh_key" ]];
      then
        mkdir -p /root/.ssh
        echo $ssh_key >> /root/.ssh/authorized_keys
        chmod -R go-rwx /root/.ssh
      fi
    vmtoolsd --cmd "info-set guestinfo.postcustomization.store.sshkey.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.proxy.setting.status in_progress"
    export HTTP_PROXY="{http_proxy}"
    export HTTPS_PROXY="{https_proxy}"
    export http_proxy="{http_proxy}"
    export https_proxy="{https_proxy}"
    export NO_PROXY="{no_proxy}"
    export no_proxy="{no_proxy}"

    mkdir -p /etc/systemd/system/containerd.service.d
    cat <<END > /etc/systemd/system/containerd.service.d/http-proxy.conf
    [Service]
    Environment="HTTP_PROXY={http_proxy}"
    Environment="HTTPS_PROXY={https_proxy}"
    Environment="http_proxy={http_proxy}"
    Environment="https_proxy={https_proxy}"
    Environment="no_proxy={no_proxy}"
    Environment="NO_PROXY={no_proxy}"
    END
    systemctl daemon-reload
    systemctl restart containerd
    vmtoolsd --cmd "info-set guestinfo.postcustomization.proxy.setting.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubeadm.node.join.status in_progress"
      # tag images
      for image in "coredns" "etcd" "kube-proxy" "kube-apiserver" "kube-controller-manager" "kube-scheduler"
      do
        image_ref=$(ctr -n=k8s.io image list | cut -d" " -f1 | grep $image)
        ref_path=$(echo $image_ref | sed 's/:.*//')
        new_tag_version=$(echo $image_ref | sed 's/.*://' | sed 's/_/-/')
        ctr -n=k8s.io image tag $image_ref $ref_path:$new_tag_version
      done

      kubeadm join --config /root/kubeadm-defaults-join.conf --v=10 &> /root/kubeadm-join.out
    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubeadm.node.join.status successful"

    # openbracket(all caps) will be replaced by the open bracket and closebracket (all caps)
    # will be replaced by an open bracket.
    # This convention is needed so that python's template format function does not view the bash
    # $\openbracket/VAR/\closebracket as a format variable that will be replaced by the python format function.
    vmtoolsd --cmd "info-set guestinfo.postcustomization.core_packages.attempted_install in_progress"
      install_kapp_controller={install_kapp_controller}
      kubeconfig_path=/root/kubeconfig.yaml
      touch $kubeconfig_path
      # Kapp-controller is installed on the first worker node
      kapp_controller_tkg_version="{kapp_controller_version}"
      kapp_controller_tkg_version=$(echo $kapp_controller_tkg_version | sed 's/+/_/')
      kapp_controller_version=$(echo $kapp_controller_tkg_version | sed 's/_.*//' | sed 's/v//')
      install_tanzu_cli_packages={install_tanzu_cli_packages}
      if [[ "$install_kapp_controller" = true ]]; then
        vmtoolsd --cmd "info-get guestinfo.postcustomization.control_plane.kubeconfig" > $kubeconfig_path
        if [[ "$install_tanzu_cli_packages" = false ]]; then
          # clear extra config if it won't be used again to avoid leaking it
          vmtoolsd --cmd "info-set guestinfo.postcustomization.control_plane.kubeconfig null"
        fi
        export KUBECONFIG=$kubeconfig_path

        # install kapp-controller, which is needed for tanzu-cli
        if [[ ! -z "$kapp_controller_version" && $kapp_controller_version != "null" ]]; then
          # If the kapp-controller image pulls from docker, we modify the manifest to pull from harbor
          # Note: this does not replace pulling from ghcr, which is currently okay since there not rate limits
          kapp_controller_manifest_path=/root/kapp-controller-v$OPENBRACKETkapp_controller_versionCLOSEBRACKET.yaml
          wget -O $kapp_controller_manifest_path https://github.com/vmware-tanzu/carvel-kapp-controller/releases/download/v$OPENBRACKETkapp_controller_versionCLOSEBRACKET/release.yml
          sed -i "s/image: index.docker.io.*/image: projects.registry.VMware.com\/tkg\/kapp-controller:v$OPENBRACKETkapp_controller_tkg_versionCLOSEBRACKET/g" $kapp_controller_manifest_path
          sed -i "s/URL: index.docker.io.*/ URL: projects.registry.VMware.com\/tkg\/kapp-controller:v$OPENBRACKETkapp_controller_tkg_versionCLOSEBRACKET/g" $kapp_controller_manifest_path
          kubectl apply -f $kapp_controller_manifest_path
        fi
      fi

      # Metrics server (currently the only tanzu cli installed package) is installed on the last worker node
      if [[ "$install_tanzu_cli_packages" = true ]]; then
        vmtoolsd --cmd "info-get guestinfo.postcustomization.control_plane.kubeconfig" > $kubeconfig_path
        # clear extra config to avoid leaking it
        vmtoolsd --cmd "info-set guestinfo.postcustomization.control_plane.kubeconfig null"
        export KUBECONFIG=$kubeconfig_path
        metrics_server_version=""

        # Wait for kapp-controller to be ready for at most 8 minutes to be running so that tanzu cli can be fully
        # functional for our purposes
        kapp_controller_pod=$(kubectl get pods -l=app='kapp-controller' -A -o jsonpath='OPENBRACKET.items[*].metadata.nameCLOSEBRACKET')
        kapp_controller_namespace=$(kubectl get pods -l=app='kapp-controller' -A -o jsonpath='OPENBRACKET.items[*].metadata.namespaceCLOSEBRACKET')
        kapp_controller_ready_path=/root/kapp_controller_ready.txt
        kapp_controller_ready=false
        if [[ ! -z "$kapp_controller_pod" ]]; then
          kubectl wait --for=condition=Ready pod/$OPENBRACKETkapp_controller_podCLOSEBRACKET -n $kapp_controller_namespace --timeout=10m > $kapp_controller_ready_path
          if [[ -f "$kapp_controller_ready_path" && -s $kapp_controller_ready_path ]]; then
            kapp_controller_ready=true
          else
            kapp_controller_version=""
          fi
        fi

        if [[ "$kapp_controller_ready" = true ]]; then
          # install tanzu cli
          tanzu_path=/root/tanzu
          mkdir $tanzu_path
          tanzu_tar_path=$tanzu_path/tanzu_cli.tar.gz
          wget https://github.com/vmware-tanzu/tanzu-framework/releases/download/v0.17.0/tanzu-cli-linux-amd64.tar.gz -O $tanzu_tar_path
          tar -zxvf $tanzu_tar_path -C $tanzu_path
          sudo install $OPENBRACKETtanzu_pathCLOSEBRACKET/v0.17.0/tanzu-core-linux_amd64 /usr/local/bin/tanzu
          export HOME=/root
          tanzu plugin install package

          k8s_version="{k8s_version}"
          export KUBECONFIG=$kubeconfig_path
          tanzu package repository add tanzu-core --namespace tkg-system --create-namespace --url projects.registry.vmware.com/tkg/packages/core/repo:$OPENBRACKETk8s_versionCLOSEBRACKET

          # wait for metrics server to be available
          metrics_server_info_str=$(tanzu package available list -A | grep metrics-server)
          num_metrics_server_loops=0
          while [[ -z "$metrics_server_info_str" ]]; do
            sleep 15
            ((num_metrics_server_loops++))
            if [[ $num_metrics_server_loops -gt 20 ]]; then # max 5 minutes
              break
            fi
            metrics_server_info_str=$(tanzu package available list -A | grep metrics-server)
          done

          # install metrics server
          metrics_server_version=$(echo $metrics_server_info_str | sed -n 's/^.*\([0-9]\+\.[0-9]\+\.[0-9]\++vmware.[0-9]\+-tkg.[0-9]\+\).*$/\1/p')
          if [[ ! -z "$metrics_server_version" && $metrics_server_version != "null" ]]; then
            # similar to other k8s packages, we are not waiting in order to avoid
            # timeout issues crashing the cluster creation
            tanzu package install metrics-server --namespace tkg-system --create-namespace --package-name metrics-server.tanzu.vmware.com --version $metrics_server_version --wait=false
          fi

          if [[ -z "$kapp_controller_version" ]]; then
            kapp_controller_version="null"
          fi
          vmtoolsd --cmd "info-set guestinfo.postcustomization.core_packages.kapp_controller_version $kapp_controller_version"
          if [[ -z "$metrics_server_version" ]]; then
            metrics_server_version="null"
          fi
          vmtoolsd --cmd "info-set guestinfo.postcustomization.core_packages.metrics_server_version $metrics_server_version"
        fi

        rm $kubeconfig_path
      fi
    vmtoolsd --cmd "info-set guestinfo.postcustomization.core_packages.attempted_install successful"

    echo "$(date) post customization script execution completed" &>> /var/log/cse/customization/status.log

    exit 0
runcmd:
- '[ ! -f /root/kubeadm-defaults-join.conf ] && cloud-init clean && sudo reboot'
- '[ ! -f /root/node.sh ] && cloud-init clean && sudo reboot'
- bash /root/node.sh
timezone: UTC
disable_root: false
preserve_hostname: false
hostname: {vm_host_name}
final_message: "The system is ready after $UPTIME seconds"
