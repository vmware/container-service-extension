# coding: utf-8

"""
    PKS

    PKS API  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from container_service_extension.pksclient.api_client import ApiClient


class ProfileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_network_profile(self, body, **kwargs):  # noqa: E501
        """Create a new network profile  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_network_profile(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NetworkProfileRequest body: Network profile info (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_network_profile_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_network_profile_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_network_profile_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new network profile  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_network_profile_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NetworkProfileRequest body: Network profile info (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_network_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_network_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'uaa']  # noqa: E501

        return self.api_client.call_api(
            '/network-profiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_network_profile(self, profile_name, **kwargs):  # noqa: E501
        """delete_network_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_network_profile(profile_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str profile_name: The network profile name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_network_profile_with_http_info(profile_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_network_profile_with_http_info(profile_name, **kwargs)  # noqa: E501
            return data

    def delete_network_profile_with_http_info(self, profile_name, **kwargs):  # noqa: E501
        """delete_network_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_network_profile_with_http_info(profile_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str profile_name: The network profile name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_network_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_name' is set
        if ('profile_name' not in params or
                params['profile_name'] is None):
            raise ValueError("Missing the required parameter `profile_name` when calling `delete_network_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_name' in params:
            path_params['profileName'] = params['profile_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'uaa']  # noqa: E501

        return self.api_client.call_api(
            '/network-profiles/{profileName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_profile(self, profile_name, **kwargs):  # noqa: E501
        """get_network_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_profile(profile_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str profile_name: The network profile name (required)
        :return: NetworkProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_profile_with_http_info(profile_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_profile_with_http_info(profile_name, **kwargs)  # noqa: E501
            return data

    def get_network_profile_with_http_info(self, profile_name, **kwargs):  # noqa: E501
        """get_network_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_profile_with_http_info(profile_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str profile_name: The network profile name (required)
        :return: NetworkProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_name' is set
        if ('profile_name' not in params or
                params['profile_name'] is None):
            raise ValueError("Missing the required parameter `profile_name` when calling `get_network_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_name' in params:
            path_params['profileName'] = params['profile_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'uaa']  # noqa: E501

        return self.api_client.call_api(
            '/network-profiles/{profileName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkProfile',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_network_profiles(self, **kwargs):  # noqa: E501
        """List all network profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_network_profiles(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[NetworkProfile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_network_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_network_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_network_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """List all network profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_network_profiles_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[NetworkProfile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_network_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'uaa']  # noqa: E501

        return self.api_client.call_api(
            '/network-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NetworkProfile]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
