# coding: utf-8

"""
    PKS

    PKS API  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ComputeProfileParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'azs': 'list[AZ]',
        'worker_azs': 'list[str]',
        'master_azs': 'list[str]'
    }

    attribute_map = {
        'azs': 'azs',
        'worker_azs': 'worker_azs',
        'master_azs': 'master_azs'
    }

    def __init__(self, azs=None, worker_azs=None, master_azs=None):  # noqa: E501
        """ComputeProfileParameters - a model defined in Swagger"""  # noqa: E501

        self._azs = None
        self._worker_azs = None
        self._master_azs = None
        self.discriminator = None

        self.azs = azs
        if worker_azs is not None:
            self.worker_azs = worker_azs
        if master_azs is not None:
            self.master_azs = master_azs

    @property
    def azs(self):
        """Gets the azs of this ComputeProfileParameters.  # noqa: E501


        :return: The azs of this ComputeProfileParameters.  # noqa: E501
        :rtype: list[AZ]
        """
        return self._azs

    @azs.setter
    def azs(self, azs):
        """Sets the azs of this ComputeProfileParameters.


        :param azs: The azs of this ComputeProfileParameters.  # noqa: E501
        :type: list[AZ]
        """
        if azs is None:
            raise ValueError("Invalid value for `azs`, must not be `None`")  # noqa: E501

        self._azs = azs

    @property
    def worker_azs(self):
        """Gets the worker_azs of this ComputeProfileParameters.  # noqa: E501


        :return: The worker_azs of this ComputeProfileParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._worker_azs

    @worker_azs.setter
    def worker_azs(self, worker_azs):
        """Sets the worker_azs of this ComputeProfileParameters.


        :param worker_azs: The worker_azs of this ComputeProfileParameters.  # noqa: E501
        :type: list[str]
        """

        self._worker_azs = worker_azs

    @property
    def master_azs(self):
        """Gets the master_azs of this ComputeProfileParameters.  # noqa: E501


        :return: The master_azs of this ComputeProfileParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._master_azs

    @master_azs.setter
    def master_azs(self, master_azs):
        """Sets the master_azs of this ComputeProfileParameters.


        :param master_azs: The master_azs of this ComputeProfileParameters.  # noqa: E501
        :type: list[str]
        """

        self._master_azs = master_azs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComputeProfileParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputeProfileParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
