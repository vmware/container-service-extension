# coding: utf-8

"""
    TKG Kubernetes API

    This API provides to vCD tenants the means to provision (create and update) Tanzu Kubernetes Grid clusters. This is complementary to the defined-entity APIs:    GET /cloudapi/1.0.0/entities/urn:vcloud:entity:vmware.tkgcluster:1.0.0:{id} which allows to retrieve the clusters created by the API presented here. This is why you will not find here a GET operation for the corresponding entity.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Error(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'minor_error_code': 'str',
        'message': 'str',
        'stack_trace': 'str'
    }

    attribute_map = {
        'minor_error_code': 'minorErrorCode',
        'message': 'message',
        'stack_trace': 'stackTrace'
    }

    def __init__(self, minor_error_code=None, message=None, stack_trace=None):  # noqa: E501
        """Error - a model defined in Swagger"""  # noqa: E501

        self._minor_error_code = None
        self._message = None
        self._stack_trace = None
        self.discriminator = None

        self.minor_error_code = minor_error_code
        self.message = message
        if stack_trace is not None:
            self.stack_trace = stack_trace

    @property
    def minor_error_code(self):
        """Gets the minor_error_code of this Error.  # noqa: E501


        :return: The minor_error_code of this Error.  # noqa: E501
        :rtype: str
        """
        return self._minor_error_code

    @minor_error_code.setter
    def minor_error_code(self, minor_error_code):
        """Sets the minor_error_code of this Error.


        :param minor_error_code: The minor_error_code of this Error.  # noqa: E501
        :type: str
        """
        if minor_error_code is None:
            raise ValueError("Invalid value for `minor_error_code`, must not be `None`")  # noqa: E501

        self._minor_error_code = minor_error_code

    @property
    def message(self):
        """Gets the message of this Error.  # noqa: E501


        :return: The message of this Error.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.


        :param message: The message of this Error.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def stack_trace(self):
        """Gets the stack_trace of this Error.  # noqa: E501


        :return: The stack_trace of this Error.  # noqa: E501
        :rtype: str
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this Error.


        :param stack_trace: The stack_trace of this Error.  # noqa: E501
        :type: str
        """

        self._stack_trace = stack_trace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Error):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
