# coding: utf-8

"""
    TKG Kubernetes API

    This API provides to vCD tenants the means to provision (create and update) Tanzu Kubernetes Grid clusters. This is complementary to the defined-entity APIs:    GET /cloudapi/1.0.0/entities/urn:vcloud:entity:vmware.tkgcluster:1.0.0:{id} which allows to retrieve the clusters created by the API presented here. This is why you will not find here a GET operation for the corresponding entity.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from container_service_extension.client.tkgclient.models.tkg_cluster_topology_control_plane import TkgClusterTopologyControlPlane  # noqa: F401,E501
from container_service_extension.client.tkgclient.models.tkg_cluster_topology_workers import TkgClusterTopologyWorkers  # noqa: F401,E501


class TkgClusterSpecTopology(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'control_plane': 'TkgClusterTopologyControlPlane',
        'workers': 'TkgClusterTopologyWorkers'
    }

    attribute_map = {
        'control_plane': 'controlPlane',
        'workers': 'workers'
    }

    def __init__(self, control_plane=None, workers=None):  # noqa: E501
        """TkgClusterSpecTopology - a model defined in Swagger"""  # noqa: E501

        self._control_plane = None
        self._workers = None
        self.discriminator = None

        self.control_plane = control_plane
        self.workers = workers

    @property
    def control_plane(self):
        """Gets the control_plane of this TkgClusterSpecTopology.  # noqa: E501


        :return: The control_plane of this TkgClusterSpecTopology.  # noqa: E501
        :rtype: TkgClusterTopologyControlPlane
        """
        return self._control_plane

    @control_plane.setter
    def control_plane(self, control_plane):
        """Sets the control_plane of this TkgClusterSpecTopology.


        :param control_plane: The control_plane of this TkgClusterSpecTopology.  # noqa: E501
        :type: TkgClusterTopologyControlPlane
        """
        if control_plane is None:
            raise ValueError("Invalid value for `control_plane`, must not be `None`")  # noqa: E501

        self._control_plane = control_plane

    @property
    def workers(self):
        """Gets the workers of this TkgClusterSpecTopology.  # noqa: E501


        :return: The workers of this TkgClusterSpecTopology.  # noqa: E501
        :rtype: TkgClusterTopologyWorkers
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """Sets the workers of this TkgClusterSpecTopology.


        :param workers: The workers of this TkgClusterSpecTopology.  # noqa: E501
        :type: TkgClusterTopologyWorkers
        """
        if workers is None:
            raise ValueError("Invalid value for `workers`, must not be `None`")  # noqa: E501

        self._workers = workers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TkgClusterSpecTopology):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
