# coding: utf-8

"""
    TKG Kubernetes API

    This API provides to vCD tenants the means to provision (create and update) Tanzu Kubernetes Grid clusters. This is complementary to the defined-entity APIs:    GET /cloudapi/1.0.0/entities/urn:vcloud:entity:vmware.tkgcluster:1.0.0:{id} which allows to retrieve the clusters created by the API presented here. This is why you will not find here a GET operation for the corresponding entity.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TkgClusterSpecSettingsNetwork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cni': 'object',
        'pods': 'object',
        'service_domain': 'str',
        'services': 'object'
    }

    attribute_map = {
        'cni': 'cni',
        'pods': 'pods',
        'service_domain': 'serviceDomain',
        'services': 'services'
    }

    def __init__(self, cni=None, pods=None, service_domain=None, services=None):  # noqa: E501
        """TkgClusterSpecSettingsNetwork - a model defined in Swagger"""  # noqa: E501
        self._cni = None
        self._pods = None
        self._service_domain = None
        self._services = None
        self.discriminator = None
        if cni is not None:
            self.cni = cni
        if pods is not None:
            self.pods = pods
        if service_domain is not None:
            self.service_domain = service_domain
        if services is not None:
            self.services = services

    @property
    def cni(self):
        """Gets the cni of this TkgClusterSpecSettingsNetwork.  # noqa: E501

        Identifies the Container Networking Interface (CNI) plug-in for the cluster. The default is Calico.   # noqa: E501

        :return: The cni of this TkgClusterSpecSettingsNetwork.  # noqa: E501
        :rtype: object
        """
        return self._cni

    @cni.setter
    def cni(self, cni):
        """Sets the cni of this TkgClusterSpecSettingsNetwork.

        Identifies the Container Networking Interface (CNI) plug-in for the cluster. The default is Calico.   # noqa: E501

        :param cni: The cni of this TkgClusterSpecSettingsNetwork.  # noqa: E501
        :type: object
        """

        self._cni = cni

    @property
    def pods(self):
        """Gets the pods of this TkgClusterSpecSettingsNetwork.  # noqa: E501

        Specifies network settings for pods.   # noqa: E501

        :return: The pods of this TkgClusterSpecSettingsNetwork.  # noqa: E501
        :rtype: object
        """
        return self._pods

    @pods.setter
    def pods(self, pods):
        """Sets the pods of this TkgClusterSpecSettingsNetwork.

        Specifies network settings for pods.   # noqa: E501

        :param pods: The pods of this TkgClusterSpecSettingsNetwork.  # noqa: E501
        :type: object
        """

        self._pods = pods

    @property
    def service_domain(self):
        """Gets the service_domain of this TkgClusterSpecSettingsNetwork.  # noqa: E501

        Specifies the service domain for the cluster. Default is cluster.local .   # noqa: E501

        :return: The service_domain of this TkgClusterSpecSettingsNetwork.  # noqa: E501
        :rtype: str
        """
        return self._service_domain

    @service_domain.setter
    def service_domain(self, service_domain):
        """Sets the service_domain of this TkgClusterSpecSettingsNetwork.

        Specifies the service domain for the cluster. Default is cluster.local .   # noqa: E501

        :param service_domain: The service_domain of this TkgClusterSpecSettingsNetwork.  # noqa: E501
        :type: str
        """

        self._service_domain = service_domain

    @property
    def services(self):
        """Gets the services of this TkgClusterSpecSettingsNetwork.  # noqa: E501

        Identifies network settings for Kubernetes services.   # noqa: E501

        :return: The services of this TkgClusterSpecSettingsNetwork.  # noqa: E501
        :rtype: object
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this TkgClusterSpecSettingsNetwork.

        Identifies network settings for Kubernetes services.   # noqa: E501

        :param services: The services of this TkgClusterSpecSettingsNetwork.  # noqa: E501
        :type: object
        """

        self._services = services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TkgClusterSpecSettingsNetwork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TkgClusterSpecSettingsNetwork):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
