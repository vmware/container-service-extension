# coding: utf-8

"""
    API Specification for the Kubernetes on vSphere (KOV)

    # RESTful API for the Kubernetes on vSphere (KOV) 

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_user(self, x_vc_username, x_vc_password, x_vc_endpoint, clustername, user, **kwargs):
        """
        adds a user to a cluster
        adds a user to a cluster by generating certs for the user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_user(x_vc_username, x_vc_password, x_vc_endpoint, clustername, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param str clustername: the cluster name (required)
        :param str user: the user name to get the cluster config for (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_user_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, clustername, user, **kwargs)
        else:
            (data) = self.add_user_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, clustername, user, **kwargs)
            return data

    def add_user_with_http_info(self, x_vc_username, x_vc_password, x_vc_endpoint, clustername, user, **kwargs):
        """
        adds a user to a cluster
        adds a user to a cluster by generating certs for the user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_user_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, clustername, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param str clustername: the cluster name (required)
        :param str user: the user name to get the cluster config for (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vc_username', 'x_vc_password', 'x_vc_endpoint', 'clustername', 'user', 'x_request_id', 'x_vc_thumbprint']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vc_username' is set
        if ('x_vc_username' not in params) or (params['x_vc_username'] is None):
            raise ValueError("Missing the required parameter `x_vc_username` when calling `add_user`")
        # verify the required parameter 'x_vc_password' is set
        if ('x_vc_password' not in params) or (params['x_vc_password'] is None):
            raise ValueError("Missing the required parameter `x_vc_password` when calling `add_user`")
        # verify the required parameter 'x_vc_endpoint' is set
        if ('x_vc_endpoint' not in params) or (params['x_vc_endpoint'] is None):
            raise ValueError("Missing the required parameter `x_vc_endpoint` when calling `add_user`")
        # verify the required parameter 'clustername' is set
        if ('clustername' not in params) or (params['clustername'] is None):
            raise ValueError("Missing the required parameter `clustername` when calling `add_user`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `add_user`")

        if 'x_vc_username' in params and len(params['x_vc_username']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_username` when calling `add_user`, length must be greater than or equal to `1`")
        if 'x_vc_password' in params and len(params['x_vc_password']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_password` when calling `add_user`, length must be greater than or equal to `1`")
        if 'x_vc_endpoint' in params and len(params['x_vc_endpoint']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_endpoint` when calling `add_user`, length must be greater than or equal to `1`")
        if 'x_request_id' in params and len(params['x_request_id']) < 1:
            raise ValueError("Invalid value for parameter `x_request_id` when calling `add_user`, length must be greater than or equal to `1`")
        if 'x_vc_thumbprint' in params and len(params['x_vc_thumbprint']) < 57:
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `add_user`, length must be greater than or equal to `57`")
        if 'x_vc_thumbprint' in params and not re.search('[a-fA-F0-9:]+', params['x_vc_thumbprint']):
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `add_user`, must conform to the pattern `/[a-fA-F0-9:]+/`")

        collection_formats = {}

        resource_path = '/clusters/{clustername}/users'.replace('{format}', 'json')
        path_params = {}
        if 'clustername' in params:
            path_params['clustername'] = params['clustername']

        query_params = {}
        if 'user' in params:
            query_params['user'] = params['user']

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']
        if 'x_vc_username' in params:
            header_params['X-VC-Username'] = params['x_vc_username']
        if 'x_vc_password' in params:
            header_params['X-VC-Password'] = params['x_vc_password']
        if 'x_vc_thumbprint' in params:
            header_params['X-VC-Thumbprint'] = params['x_vc_thumbprint']
        if 'x_vc_endpoint' in params:
            header_params['X-VC-Endpoint'] = params['x_vc_endpoint']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_cluster(self, x_vc_username, x_vc_password, x_vc_endpoint, cluster_config, **kwargs):
        """
        creates a cluster
        creates a cluster
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_cluster(x_vc_username, x_vc_password, x_vc_endpoint, cluster_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param ClusterConfig cluster_config: the config of the cluster to be created (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: TaskId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, cluster_config, **kwargs)
        else:
            (data) = self.create_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, cluster_config, **kwargs)
            return data

    def create_cluster_with_http_info(self, x_vc_username, x_vc_password, x_vc_endpoint, cluster_config, **kwargs):
        """
        creates a cluster
        creates a cluster
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, cluster_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param ClusterConfig cluster_config: the config of the cluster to be created (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: TaskId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vc_username', 'x_vc_password', 'x_vc_endpoint', 'cluster_config', 'x_request_id', 'x_vc_thumbprint']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vc_username' is set
        if ('x_vc_username' not in params) or (params['x_vc_username'] is None):
            raise ValueError("Missing the required parameter `x_vc_username` when calling `create_cluster`")
        # verify the required parameter 'x_vc_password' is set
        if ('x_vc_password' not in params) or (params['x_vc_password'] is None):
            raise ValueError("Missing the required parameter `x_vc_password` when calling `create_cluster`")
        # verify the required parameter 'x_vc_endpoint' is set
        if ('x_vc_endpoint' not in params) or (params['x_vc_endpoint'] is None):
            raise ValueError("Missing the required parameter `x_vc_endpoint` when calling `create_cluster`")
        # verify the required parameter 'cluster_config' is set
        if ('cluster_config' not in params) or (params['cluster_config'] is None):
            raise ValueError("Missing the required parameter `cluster_config` when calling `create_cluster`")

        if 'x_vc_username' in params and len(params['x_vc_username']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_username` when calling `create_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_password' in params and len(params['x_vc_password']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_password` when calling `create_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_endpoint' in params and len(params['x_vc_endpoint']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_endpoint` when calling `create_cluster`, length must be greater than or equal to `1`")
        if 'x_request_id' in params and len(params['x_request_id']) < 1:
            raise ValueError("Invalid value for parameter `x_request_id` when calling `create_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_thumbprint' in params and len(params['x_vc_thumbprint']) < 57:
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `create_cluster`, length must be greater than or equal to `57`")
        if 'x_vc_thumbprint' in params and not re.search('[a-fA-F0-9:]+', params['x_vc_thumbprint']):
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `create_cluster`, must conform to the pattern `/[a-fA-F0-9:]+/`")

        collection_formats = {}

        resource_path = '/clusters'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']
        if 'x_vc_username' in params:
            header_params['X-VC-Username'] = params['x_vc_username']
        if 'x_vc_password' in params:
            header_params['X-VC-Password'] = params['x_vc_password']
        if 'x_vc_thumbprint' in params:
            header_params['X-VC-Thumbprint'] = params['x_vc_thumbprint']
        if 'x_vc_endpoint' in params:
            header_params['X-VC-Endpoint'] = params['x_vc_endpoint']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cluster_config' in params:
            body_params = params['cluster_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaskId',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_cluster(self, x_vc_username, x_vc_password, x_vc_endpoint, name, **kwargs):
        """
        deletes a cluster
        deletes a cluster with the given name
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_cluster(x_vc_username, x_vc_password, x_vc_endpoint, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param str name: the cluster name to be deleted (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: TaskId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, name, **kwargs)
        else:
            (data) = self.delete_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, name, **kwargs)
            return data

    def delete_cluster_with_http_info(self, x_vc_username, x_vc_password, x_vc_endpoint, name, **kwargs):
        """
        deletes a cluster
        deletes a cluster with the given name
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param str name: the cluster name to be deleted (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: TaskId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vc_username', 'x_vc_password', 'x_vc_endpoint', 'name', 'x_request_id', 'x_vc_thumbprint']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vc_username' is set
        if ('x_vc_username' not in params) or (params['x_vc_username'] is None):
            raise ValueError("Missing the required parameter `x_vc_username` when calling `delete_cluster`")
        # verify the required parameter 'x_vc_password' is set
        if ('x_vc_password' not in params) or (params['x_vc_password'] is None):
            raise ValueError("Missing the required parameter `x_vc_password` when calling `delete_cluster`")
        # verify the required parameter 'x_vc_endpoint' is set
        if ('x_vc_endpoint' not in params) or (params['x_vc_endpoint'] is None):
            raise ValueError("Missing the required parameter `x_vc_endpoint` when calling `delete_cluster`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_cluster`")

        if 'x_vc_username' in params and len(params['x_vc_username']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_username` when calling `delete_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_password' in params and len(params['x_vc_password']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_password` when calling `delete_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_endpoint' in params and len(params['x_vc_endpoint']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_endpoint` when calling `delete_cluster`, length must be greater than or equal to `1`")
        if 'x_request_id' in params and len(params['x_request_id']) < 1:
            raise ValueError("Invalid value for parameter `x_request_id` when calling `delete_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_thumbprint' in params and len(params['x_vc_thumbprint']) < 57:
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `delete_cluster`, length must be greater than or equal to `57`")
        if 'x_vc_thumbprint' in params and not re.search('[a-fA-F0-9:]+', params['x_vc_thumbprint']):
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `delete_cluster`, must conform to the pattern `/[a-fA-F0-9:]+/`")

        collection_formats = {}

        resource_path = '/clusters/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']
        if 'x_vc_username' in params:
            header_params['X-VC-Username'] = params['x_vc_username']
        if 'x_vc_password' in params:
            header_params['X-VC-Password'] = params['x_vc_password']
        if 'x_vc_thumbprint' in params:
            header_params['X-VC-Thumbprint'] = params['x_vc_thumbprint']
        if 'x_vc_endpoint' in params:
            header_params['X-VC-Endpoint'] = params['x_vc_endpoint']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaskId',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_task(self, taskid, **kwargs):
        """
        get the task for the given task id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_task(taskid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str taskid: the id for a task (required)
        :param str x_request_id: A unique UUID for the request
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_task_with_http_info(taskid, **kwargs)
        else:
            (data) = self.get_task_with_http_info(taskid, **kwargs)
            return data

    def get_task_with_http_info(self, taskid, **kwargs):
        """
        get the task for the given task id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_task_with_http_info(taskid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str taskid: the id for a task (required)
        :param str x_request_id: A unique UUID for the request
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taskid', 'x_request_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taskid' is set
        if ('taskid' not in params) or (params['taskid'] is None):
            raise ValueError("Missing the required parameter `taskid` when calling `get_task`")

        if 'x_request_id' in params and len(params['x_request_id']) < 1:
            raise ValueError("Invalid value for parameter `x_request_id` when calling `get_task`, length must be greater than or equal to `1`")

        collection_formats = {}

        resource_path = '/tasks/{taskid}'.replace('{format}', 'json')
        path_params = {}
        if 'taskid' in params:
            path_params['taskid'] = params['taskid']

        query_params = {}

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Task',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_config(self, clustername, username, **kwargs):
        """
        retrieves the user kubeconfig
        retrieves the kubeconfig of the admin of the cluster
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_config(clustername, username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str clustername: the cluster name (required)
        :param str username: the user name to get the cluster config for (required)
        :param str x_request_id: A unique UUID for the request
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_config_with_http_info(clustername, username, **kwargs)
        else:
            (data) = self.get_user_config_with_http_info(clustername, username, **kwargs)
            return data

    def get_user_config_with_http_info(self, clustername, username, **kwargs):
        """
        retrieves the user kubeconfig
        retrieves the kubeconfig of the admin of the cluster
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_config_with_http_info(clustername, username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str clustername: the cluster name (required)
        :param str username: the user name to get the cluster config for (required)
        :param str x_request_id: A unique UUID for the request
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clustername', 'username', 'x_request_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clustername' is set
        if ('clustername' not in params) or (params['clustername'] is None):
            raise ValueError("Missing the required parameter `clustername` when calling `get_user_config`")
        # verify the required parameter 'username' is set
        if ('username' not in params) or (params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_user_config`")

        if 'x_request_id' in params and len(params['x_request_id']) < 1:
            raise ValueError("Invalid value for parameter `x_request_id` when calling `get_user_config`, length must be greater than or equal to `1`")

        collection_formats = {}

        resource_path = '/clusters/{clustername}/users/{username}/config'.replace('{format}', 'json')
        path_params = {}
        if 'clustername' in params:
            path_params['clustername'] = params['clustername']
        if 'username' in params:
            path_params['username'] = params['username']

        query_params = {}

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_clusters(self, x_vc_username, x_vc_password, x_vc_endpoint, **kwargs):
        """
        get a list of all clusters
        get a list of all clusters managed by the VCCS
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_clusters(x_vc_username, x_vc_password, x_vc_endpoint, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: list[Cluster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_clusters_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, **kwargs)
        else:
            (data) = self.list_clusters_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, **kwargs)
            return data

    def list_clusters_with_http_info(self, x_vc_username, x_vc_password, x_vc_endpoint, **kwargs):
        """
        get a list of all clusters
        get a list of all clusters managed by the VCCS
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_clusters_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: list[Cluster]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vc_username', 'x_vc_password', 'x_vc_endpoint', 'x_request_id', 'x_vc_thumbprint']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_clusters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vc_username' is set
        if ('x_vc_username' not in params) or (params['x_vc_username'] is None):
            raise ValueError("Missing the required parameter `x_vc_username` when calling `list_clusters`")
        # verify the required parameter 'x_vc_password' is set
        if ('x_vc_password' not in params) or (params['x_vc_password'] is None):
            raise ValueError("Missing the required parameter `x_vc_password` when calling `list_clusters`")
        # verify the required parameter 'x_vc_endpoint' is set
        if ('x_vc_endpoint' not in params) or (params['x_vc_endpoint'] is None):
            raise ValueError("Missing the required parameter `x_vc_endpoint` when calling `list_clusters`")

        if 'x_vc_username' in params and len(params['x_vc_username']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_username` when calling `list_clusters`, length must be greater than or equal to `1`")
        if 'x_vc_password' in params and len(params['x_vc_password']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_password` when calling `list_clusters`, length must be greater than or equal to `1`")
        if 'x_vc_endpoint' in params and len(params['x_vc_endpoint']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_endpoint` when calling `list_clusters`, length must be greater than or equal to `1`")
        if 'x_request_id' in params and len(params['x_request_id']) < 1:
            raise ValueError("Invalid value for parameter `x_request_id` when calling `list_clusters`, length must be greater than or equal to `1`")
        if 'x_vc_thumbprint' in params and len(params['x_vc_thumbprint']) < 57:
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `list_clusters`, length must be greater than or equal to `57`")
        if 'x_vc_thumbprint' in params and not re.search('[a-fA-F0-9:]+', params['x_vc_thumbprint']):
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `list_clusters`, must conform to the pattern `/[a-fA-F0-9:]+/`")

        collection_formats = {}

        resource_path = '/clusters'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']
        if 'x_vc_username' in params:
            header_params['X-VC-Username'] = params['x_vc_username']
        if 'x_vc_password' in params:
            header_params['X-VC-Password'] = params['x_vc_password']
        if 'x_vc_thumbprint' in params:
            header_params['X-VC-Thumbprint'] = params['x_vc_thumbprint']
        if 'x_vc_endpoint' in params:
            header_params['X-VC-Endpoint'] = params['x_vc_endpoint']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Cluster]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_task_i_ds(self, **kwargs):
        """
        get a list of task IDs
        get a list of IDs of tasks submitted to kovd
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_task_i_ds(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_request_id: A unique UUID for the request
        :param int limit:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_task_i_ds_with_http_info(**kwargs)
        else:
            (data) = self.list_task_i_ds_with_http_info(**kwargs)
            return data

    def list_task_i_ds_with_http_info(self, **kwargs):
        """
        get a list of task IDs
        get a list of IDs of tasks submitted to kovd
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_task_i_ds_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_request_id: A unique UUID for the request
        :param int limit:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_task_i_ds" % key
                )
            params[key] = val
        del params['kwargs']

        if 'x_request_id' in params and len(params['x_request_id']) < 1:
            raise ValueError("Invalid value for parameter `x_request_id` when calling `list_task_i_ds`, length must be greater than or equal to `1`")

        collection_formats = {}

        resource_path = '/tasks'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def logs_cluster(self, x_vc_username, x_vc_password, x_vc_endpoint, name, **kwargs):
        """
        fetches cluster logs
        fetches cluster logs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.logs_cluster(x_vc_username, x_vc_password, x_vc_endpoint, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param str name: the cluster name to be queried (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: TaskId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.logs_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, name, **kwargs)
        else:
            (data) = self.logs_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, name, **kwargs)
            return data

    def logs_cluster_with_http_info(self, x_vc_username, x_vc_password, x_vc_endpoint, name, **kwargs):
        """
        fetches cluster logs
        fetches cluster logs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.logs_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param str name: the cluster name to be queried (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: TaskId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vc_username', 'x_vc_password', 'x_vc_endpoint', 'name', 'x_request_id', 'x_vc_thumbprint']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vc_username' is set
        if ('x_vc_username' not in params) or (params['x_vc_username'] is None):
            raise ValueError("Missing the required parameter `x_vc_username` when calling `logs_cluster`")
        # verify the required parameter 'x_vc_password' is set
        if ('x_vc_password' not in params) or (params['x_vc_password'] is None):
            raise ValueError("Missing the required parameter `x_vc_password` when calling `logs_cluster`")
        # verify the required parameter 'x_vc_endpoint' is set
        if ('x_vc_endpoint' not in params) or (params['x_vc_endpoint'] is None):
            raise ValueError("Missing the required parameter `x_vc_endpoint` when calling `logs_cluster`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `logs_cluster`")

        if 'x_vc_username' in params and len(params['x_vc_username']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_username` when calling `logs_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_password' in params and len(params['x_vc_password']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_password` when calling `logs_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_endpoint' in params and len(params['x_vc_endpoint']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_endpoint` when calling `logs_cluster`, length must be greater than or equal to `1`")
        if 'x_request_id' in params and len(params['x_request_id']) < 1:
            raise ValueError("Invalid value for parameter `x_request_id` when calling `logs_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_thumbprint' in params and len(params['x_vc_thumbprint']) < 57:
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `logs_cluster`, length must be greater than or equal to `57`")
        if 'x_vc_thumbprint' in params and not re.search('[a-fA-F0-9:]+', params['x_vc_thumbprint']):
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `logs_cluster`, must conform to the pattern `/[a-fA-F0-9:]+/`")

        collection_formats = {}

        resource_path = '/clusters/{name}/logs'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']
        if 'x_vc_username' in params:
            header_params['X-VC-Username'] = params['x_vc_username']
        if 'x_vc_password' in params:
            header_params['X-VC-Password'] = params['x_vc_password']
        if 'x_vc_thumbprint' in params:
            header_params['X-VC-Thumbprint'] = params['x_vc_thumbprint']
        if 'x_vc_endpoint' in params:
            header_params['X-VC-Endpoint'] = params['x_vc_endpoint']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaskId',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_cluster(self, x_vc_username, x_vc_password, x_vc_endpoint, name, cluster_update_config, **kwargs):
        """
        updates a cluster
        updates a cluster with the given update config
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_cluster(x_vc_username, x_vc_password, x_vc_endpoint, name, cluster_update_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param str name: the cluster name to be updated (required)
        :param ClusterUpdateConfig cluster_update_config: the new config of the cluster to be updated (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: TaskId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, name, cluster_update_config, **kwargs)
        else:
            (data) = self.update_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, name, cluster_update_config, **kwargs)
            return data

    def update_cluster_with_http_info(self, x_vc_username, x_vc_password, x_vc_endpoint, name, cluster_update_config, **kwargs):
        """
        updates a cluster
        updates a cluster with the given update config
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_cluster_with_http_info(x_vc_username, x_vc_password, x_vc_endpoint, name, cluster_update_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vc_username: Username for VC (required)
        :param str x_vc_password: Password for VC (required)
        :param str x_vc_endpoint: VC endpoint (required)
        :param str name: the cluster name to be updated (required)
        :param ClusterUpdateConfig cluster_update_config: the new config of the cluster to be updated (required)
        :param str x_request_id: A unique UUID for the request
        :param str x_vc_thumbprint: Thumbprint for VC
        :return: TaskId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vc_username', 'x_vc_password', 'x_vc_endpoint', 'name', 'cluster_update_config', 'x_request_id', 'x_vc_thumbprint']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vc_username' is set
        if ('x_vc_username' not in params) or (params['x_vc_username'] is None):
            raise ValueError("Missing the required parameter `x_vc_username` when calling `update_cluster`")
        # verify the required parameter 'x_vc_password' is set
        if ('x_vc_password' not in params) or (params['x_vc_password'] is None):
            raise ValueError("Missing the required parameter `x_vc_password` when calling `update_cluster`")
        # verify the required parameter 'x_vc_endpoint' is set
        if ('x_vc_endpoint' not in params) or (params['x_vc_endpoint'] is None):
            raise ValueError("Missing the required parameter `x_vc_endpoint` when calling `update_cluster`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_cluster`")
        # verify the required parameter 'cluster_update_config' is set
        if ('cluster_update_config' not in params) or (params['cluster_update_config'] is None):
            raise ValueError("Missing the required parameter `cluster_update_config` when calling `update_cluster`")

        if 'x_vc_username' in params and len(params['x_vc_username']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_username` when calling `update_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_password' in params and len(params['x_vc_password']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_password` when calling `update_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_endpoint' in params and len(params['x_vc_endpoint']) < 1:
            raise ValueError("Invalid value for parameter `x_vc_endpoint` when calling `update_cluster`, length must be greater than or equal to `1`")
        if 'x_request_id' in params and len(params['x_request_id']) < 1:
            raise ValueError("Invalid value for parameter `x_request_id` when calling `update_cluster`, length must be greater than or equal to `1`")
        if 'x_vc_thumbprint' in params and len(params['x_vc_thumbprint']) < 57:
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `update_cluster`, length must be greater than or equal to `57`")
        if 'x_vc_thumbprint' in params and not re.search('[a-fA-F0-9:]+', params['x_vc_thumbprint']):
            raise ValueError("Invalid value for parameter `x_vc_thumbprint` when calling `update_cluster`, must conform to the pattern `/[a-fA-F0-9:]+/`")

        collection_formats = {}

        resource_path = '/clusters/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-Id'] = params['x_request_id']
        if 'x_vc_username' in params:
            header_params['X-VC-Username'] = params['x_vc_username']
        if 'x_vc_password' in params:
            header_params['X-VC-Password'] = params['x_vc_password']
        if 'x_vc_thumbprint' in params:
            header_params['X-VC-Thumbprint'] = params['x_vc_thumbprint']
        if 'x_vc_endpoint' in params:
            header_params['X-VC-Endpoint'] = params['x_vc_endpoint']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cluster_update_config' in params:
            body_params = params['cluster_update_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaskId',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
