# coding: utf-8

"""
    API Specification for the Kubernetes on vSphere (KOV)

    # RESTful API for the Kubernetes on vSphere (KOV) 

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Task(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, task_type=None, created=None, ttl=None, step_infos=None, context=None):
        """
        Task - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'TaskId',
            'task_type': 'TaskType',
            'created': 'datetime',
            'ttl': 'str',
            'step_infos': 'list[TaskStepInfo]',
            'context': 'TaskContext'
        }

        self.attribute_map = {
            'id': 'id',
            'task_type': 'taskType',
            'created': 'created',
            'ttl': 'ttl',
            'step_infos': 'stepInfos',
            'context': 'context'
        }

        self._id = id
        self._task_type = task_type
        self._created = created
        self._ttl = ttl
        self._step_infos = step_infos
        self._context = context

    @property
    def id(self):
        """
        Gets the id of this Task.

        :return: The id of this Task.
        :rtype: TaskId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Task.

        :param id: The id of this Task.
        :type: TaskId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def task_type(self):
        """
        Gets the task_type of this Task.

        :return: The task_type of this Task.
        :rtype: TaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """
        Sets the task_type of this Task.

        :param task_type: The task_type of this Task.
        :type: TaskType
        """

        self._task_type = task_type

    @property
    def created(self):
        """
        Gets the created of this Task.

        :return: The created of this Task.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Task.

        :param created: The created of this Task.
        :type: datetime
        """

        self._created = created

    @property
    def ttl(self):
        """
        Gets the ttl of this Task.

        :return: The ttl of this Task.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """
        Sets the ttl of this Task.

        :param ttl: The ttl of this Task.
        :type: str
        """

        self._ttl = ttl

    @property
    def step_infos(self):
        """
        Gets the step_infos of this Task.

        :return: The step_infos of this Task.
        :rtype: list[TaskStepInfo]
        """
        return self._step_infos

    @step_infos.setter
    def step_infos(self, step_infos):
        """
        Sets the step_infos of this Task.

        :param step_infos: The step_infos of this Task.
        :type: list[TaskStepInfo]
        """
        if step_infos is None:
            raise ValueError("Invalid value for `step_infos`, must not be `None`")

        self._step_infos = step_infos

    @property
    def context(self):
        """
        Gets the context of this Task.

        :return: The context of this Task.
        :rtype: TaskContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this Task.

        :param context: The context of this Task.
        :type: TaskContext
        """

        self._context = context

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
