# coding: utf-8

"""
    API Specification for the Kubernetes on vSphere (KOV)

    # RESTful API for the Kubernetes on vSphere (KOV) 

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Cluster(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, status=None, num_masters=None, num_workers=None, leader_endpoint=None):
        """
        Cluster - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'status': 'ClusterStatus',
            'num_masters': 'int',
            'num_workers': 'int',
            'leader_endpoint': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'status': 'status',
            'num_masters': 'numMasters',
            'num_workers': 'numWorkers',
            'leader_endpoint': 'leaderEndpoint'
        }

        self._name = name
        self._status = status
        self._num_masters = num_masters
        self._num_workers = num_workers
        self._leader_endpoint = leader_endpoint

    @property
    def name(self):
        """
        Gets the name of this Cluster.
        the cluster name, should be valid for use in dns names

        :return: The name of this Cluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Cluster.
        the cluster name, should be valid for use in dns names

        :param name: The name of this Cluster.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 63:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `63`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")
        if name is not None and not re.search('^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/`")

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this Cluster.

        :return: The status of this Cluster.
        :rtype: ClusterStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Cluster.

        :param status: The status of this Cluster.
        :type: ClusterStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def num_masters(self):
        """
        Gets the num_masters of this Cluster.

        :return: The num_masters of this Cluster.
        :rtype: int
        """
        return self._num_masters

    @num_masters.setter
    def num_masters(self, num_masters):
        """
        Sets the num_masters of this Cluster.

        :param num_masters: The num_masters of this Cluster.
        :type: int
        """

        self._num_masters = num_masters

    @property
    def num_workers(self):
        """
        Gets the num_workers of this Cluster.

        :return: The num_workers of this Cluster.
        :rtype: int
        """
        return self._num_workers

    @num_workers.setter
    def num_workers(self, num_workers):
        """
        Sets the num_workers of this Cluster.

        :param num_workers: The num_workers of this Cluster.
        :type: int
        """

        self._num_workers = num_workers

    @property
    def leader_endpoint(self):
        """
        Gets the leader_endpoint of this Cluster.

        :return: The leader_endpoint of this Cluster.
        :rtype: str
        """
        return self._leader_endpoint

    @leader_endpoint.setter
    def leader_endpoint(self, leader_endpoint):
        """
        Sets the leader_endpoint of this Cluster.

        :param leader_endpoint: The leader_endpoint of this Cluster.
        :type: str
        """

        self._leader_endpoint = leader_endpoint

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
