# coding: utf-8

"""
    API Specification for the Kubernetes on vSphere (KOV)

    # RESTful API for the Kubernetes on vSphere (KOV) 

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClusterConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, min_nodes=None, max_nodes=None, no_of_masters=1, leader_endpoint=None, storage_classes=None, service_network=None, node_network=None, network_provider='canal', datacenter=None, datastore=None, vsphere_cluster=None, ops_username=None, ops_password=None, authorized_keys=None):
        """
        ClusterConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'min_nodes': 'int',
            'max_nodes': 'int',
            'no_of_masters': 'int',
            'leader_endpoint': 'NetworkEndpoint',
            'storage_classes': 'list[StorageClass]',
            'service_network': 'str',
            'node_network': 'str',
            'network_provider': 'str',
            'datacenter': 'str',
            'datastore': 'str',
            'vsphere_cluster': 'str',
            'ops_username': 'str',
            'ops_password': 'str',
            'authorized_keys': 'list[str]'
        }

        self.attribute_map = {
            'name': 'name',
            'min_nodes': 'minNodes',
            'max_nodes': 'maxNodes',
            'no_of_masters': 'noOfMasters',
            'leader_endpoint': 'leaderEndpoint',
            'storage_classes': 'storageClasses',
            'service_network': 'serviceNetwork',
            'node_network': 'nodeNetwork',
            'network_provider': 'networkProvider',
            'datacenter': 'datacenter',
            'datastore': 'datastore',
            'vsphere_cluster': 'vsphereCluster',
            'ops_username': 'opsUsername',
            'ops_password': 'opsPassword',
            'authorized_keys': 'authorizedKeys'
        }

        self._name = name
        self._min_nodes = min_nodes
        self._max_nodes = max_nodes
        self._no_of_masters = no_of_masters
        self._leader_endpoint = leader_endpoint
        self._storage_classes = storage_classes
        self._service_network = service_network
        self._node_network = node_network
        self._network_provider = network_provider
        self._datacenter = datacenter
        self._datastore = datastore
        self._vsphere_cluster = vsphere_cluster
        self._ops_username = ops_username
        self._ops_password = ops_password
        self._authorized_keys = authorized_keys

    @property
    def name(self):
        """
        Gets the name of this ClusterConfig.
        the cluster name, should be valid for use in dns names

        :return: The name of this ClusterConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ClusterConfig.
        the cluster name, should be valid for use in dns names

        :param name: The name of this ClusterConfig.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 63:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `63`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")
        if name is not None and not re.search('^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/`")

        self._name = name

    @property
    def min_nodes(self):
        """
        Gets the min_nodes of this ClusterConfig.
        the minimum number of nodes that can be deployed

        :return: The min_nodes of this ClusterConfig.
        :rtype: int
        """
        return self._min_nodes

    @min_nodes.setter
    def min_nodes(self, min_nodes):
        """
        Sets the min_nodes of this ClusterConfig.
        the minimum number of nodes that can be deployed

        :param min_nodes: The min_nodes of this ClusterConfig.
        :type: int
        """
        if min_nodes is None:
            raise ValueError("Invalid value for `min_nodes`, must not be `None`")
        if min_nodes is not None and min_nodes < 1:
            raise ValueError("Invalid value for `min_nodes`, must be a value greater than or equal to `1`")

        self._min_nodes = min_nodes

    @property
    def max_nodes(self):
        """
        Gets the max_nodes of this ClusterConfig.
        the minimum number of nodes that can be deployed

        :return: The max_nodes of this ClusterConfig.
        :rtype: int
        """
        return self._max_nodes

    @max_nodes.setter
    def max_nodes(self, max_nodes):
        """
        Sets the max_nodes of this ClusterConfig.
        the minimum number of nodes that can be deployed

        :param max_nodes: The max_nodes of this ClusterConfig.
        :type: int
        """

        self._max_nodes = max_nodes

    @property
    def no_of_masters(self):
        """
        Gets the no_of_masters of this ClusterConfig.
        the number of master nodes to create

        :return: The no_of_masters of this ClusterConfig.
        :rtype: int
        """
        return self._no_of_masters

    @no_of_masters.setter
    def no_of_masters(self, no_of_masters):
        """
        Sets the no_of_masters of this ClusterConfig.
        the number of master nodes to create

        :param no_of_masters: The no_of_masters of this ClusterConfig.
        :type: int
        """
        if no_of_masters is None:
            raise ValueError("Invalid value for `no_of_masters`, must not be `None`")
        if no_of_masters is not None and no_of_masters < 1:
            raise ValueError("Invalid value for `no_of_masters`, must be a value greater than or equal to `1`")

        self._no_of_masters = no_of_masters

    @property
    def leader_endpoint(self):
        """
        Gets the leader_endpoint of this ClusterConfig.
        leader node network configuration

        :return: The leader_endpoint of this ClusterConfig.
        :rtype: NetworkEndpoint
        """
        return self._leader_endpoint

    @leader_endpoint.setter
    def leader_endpoint(self, leader_endpoint):
        """
        Sets the leader_endpoint of this ClusterConfig.
        leader node network configuration

        :param leader_endpoint: The leader_endpoint of this ClusterConfig.
        :type: NetworkEndpoint
        """

        self._leader_endpoint = leader_endpoint

    @property
    def storage_classes(self):
        """
        Gets the storage_classes of this ClusterConfig.

        :return: The storage_classes of this ClusterConfig.
        :rtype: list[StorageClass]
        """
        return self._storage_classes

    @storage_classes.setter
    def storage_classes(self, storage_classes):
        """
        Sets the storage_classes of this ClusterConfig.

        :param storage_classes: The storage_classes of this ClusterConfig.
        :type: list[StorageClass]
        """

        self._storage_classes = storage_classes

    @property
    def service_network(self):
        """
        Gets the service_network of this ClusterConfig.
        the service network for the deployed nodes

        :return: The service_network of this ClusterConfig.
        :rtype: str
        """
        return self._service_network

    @service_network.setter
    def service_network(self, service_network):
        """
        Sets the service_network of this ClusterConfig.
        the service network for the deployed nodes

        :param service_network: The service_network of this ClusterConfig.
        :type: str
        """

        self._service_network = service_network

    @property
    def node_network(self):
        """
        Gets the node_network of this ClusterConfig.
        the network used for node-to-node communication,

        :return: The node_network of this ClusterConfig.
        :rtype: str
        """
        return self._node_network

    @node_network.setter
    def node_network(self, node_network):
        """
        Sets the node_network of this ClusterConfig.
        the network used for node-to-node communication,

        :param node_network: The node_network of this ClusterConfig.
        :type: str
        """
        if node_network is None:
            raise ValueError("Invalid value for `node_network`, must not be `None`")

        self._node_network = node_network

    @property
    def network_provider(self):
        """
        Gets the network_provider of this ClusterConfig.
        the network provider of the cluster

        :return: The network_provider of this ClusterConfig.
        :rtype: str
        """
        return self._network_provider

    @network_provider.setter
    def network_provider(self, network_provider):
        """
        Sets the network_provider of this ClusterConfig.
        the network provider of the cluster

        :param network_provider: The network_provider of this ClusterConfig.
        :type: str
        """

        self._network_provider = network_provider

    @property
    def datacenter(self):
        """
        Gets the datacenter of this ClusterConfig.
        the vsphere datacenter

        :return: The datacenter of this ClusterConfig.
        :rtype: str
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """
        Sets the datacenter of this ClusterConfig.
        the vsphere datacenter

        :param datacenter: The datacenter of this ClusterConfig.
        :type: str
        """
        if datacenter is None:
            raise ValueError("Invalid value for `datacenter`, must not be `None`")

        self._datacenter = datacenter

    @property
    def datastore(self):
        """
        Gets the datastore of this ClusterConfig.
        the datastore for node

        :return: The datastore of this ClusterConfig.
        :rtype: str
        """
        return self._datastore

    @datastore.setter
    def datastore(self, datastore):
        """
        Sets the datastore of this ClusterConfig.
        the datastore for node

        :param datastore: The datastore of this ClusterConfig.
        :type: str
        """
        if datastore is None:
            raise ValueError("Invalid value for `datastore`, must not be `None`")

        self._datastore = datastore

    @property
    def vsphere_cluster(self):
        """
        Gets the vsphere_cluster of this ClusterConfig.

        :return: The vsphere_cluster of this ClusterConfig.
        :rtype: str
        """
        return self._vsphere_cluster

    @vsphere_cluster.setter
    def vsphere_cluster(self, vsphere_cluster):
        """
        Sets the vsphere_cluster of this ClusterConfig.

        :param vsphere_cluster: The vsphere_cluster of this ClusterConfig.
        :type: str
        """
        if vsphere_cluster is None:
            raise ValueError("Invalid value for `vsphere_cluster`, must not be `None`")
        if vsphere_cluster is not None and len(vsphere_cluster) < 1:
            raise ValueError("Invalid value for `vsphere_cluster`, length must be greater than or equal to `1`")

        self._vsphere_cluster = vsphere_cluster

    @property
    def ops_username(self):
        """
        Gets the ops_username of this ClusterConfig.

        :return: The ops_username of this ClusterConfig.
        :rtype: str
        """
        return self._ops_username

    @ops_username.setter
    def ops_username(self, ops_username):
        """
        Sets the ops_username of this ClusterConfig.

        :param ops_username: The ops_username of this ClusterConfig.
        :type: str
        """
        if ops_username is None:
            raise ValueError("Invalid value for `ops_username`, must not be `None`")
        if ops_username is not None and len(ops_username) < 1:
            raise ValueError("Invalid value for `ops_username`, length must be greater than or equal to `1`")

        self._ops_username = ops_username

    @property
    def ops_password(self):
        """
        Gets the ops_password of this ClusterConfig.

        :return: The ops_password of this ClusterConfig.
        :rtype: str
        """
        return self._ops_password

    @ops_password.setter
    def ops_password(self, ops_password):
        """
        Sets the ops_password of this ClusterConfig.

        :param ops_password: The ops_password of this ClusterConfig.
        :type: str
        """
        if ops_password is None:
            raise ValueError("Invalid value for `ops_password`, must not be `None`")
        if ops_password is not None and len(ops_password) < 1:
            raise ValueError("Invalid value for `ops_password`, length must be greater than or equal to `1`")

        self._ops_password = ops_password

    @property
    def authorized_keys(self):
        """
        Gets the authorized_keys of this ClusterConfig.
        the public keys that should get root ssh access to the nodes

        :return: The authorized_keys of this ClusterConfig.
        :rtype: list[str]
        """
        return self._authorized_keys

    @authorized_keys.setter
    def authorized_keys(self, authorized_keys):
        """
        Sets the authorized_keys of this ClusterConfig.
        the public keys that should get root ssh access to the nodes

        :param authorized_keys: The authorized_keys of this ClusterConfig.
        :type: list[str]
        """

        self._authorized_keys = authorized_keys

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClusterConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
