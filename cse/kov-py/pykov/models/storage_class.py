# coding: utf-8

"""
    API Specification for the Kubernetes on vSphere (KOV)

    # RESTful API for the Kubernetes on vSphere (KOV) 

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StorageClass(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, datastore=None, cache_reservation=None, disk_stripes=None, force_provisioning=None, host_failures_to_tolerate=None, iops_limit=None, object_space_reservation=None):
        """
        StorageClass - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'datastore': 'str',
            'cache_reservation': 'int',
            'disk_stripes': 'int',
            'force_provisioning': 'bool',
            'host_failures_to_tolerate': 'int',
            'iops_limit': 'int',
            'object_space_reservation': 'int'
        }

        self.attribute_map = {
            'name': 'name',
            'datastore': 'datastore',
            'cache_reservation': 'cacheReservation',
            'disk_stripes': 'diskStripes',
            'force_provisioning': 'forceProvisioning',
            'host_failures_to_tolerate': 'hostFailuresToTolerate',
            'iops_limit': 'iopsLimit',
            'object_space_reservation': 'objectSpaceReservation'
        }

        self._name = name
        self._datastore = datastore
        self._cache_reservation = cache_reservation
        self._disk_stripes = disk_stripes
        self._force_provisioning = force_provisioning
        self._host_failures_to_tolerate = host_failures_to_tolerate
        self._iops_limit = iops_limit
        self._object_space_reservation = object_space_reservation

    @property
    def name(self):
        """
        Gets the name of this StorageClass.
        the name of the storage class

        :return: The name of this StorageClass.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StorageClass.
        the name of the storage class

        :param name: The name of this StorageClass.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def datastore(self):
        """
        Gets the datastore of this StorageClass.
        the name of the datastore to create the volume in

        :return: The datastore of this StorageClass.
        :rtype: str
        """
        return self._datastore

    @datastore.setter
    def datastore(self, datastore):
        """
        Sets the datastore of this StorageClass.
        the name of the datastore to create the volume in

        :param datastore: The datastore of this StorageClass.
        :type: str
        """
        if datastore is None:
            raise ValueError("Invalid value for `datastore`, must not be `None`")
        if datastore is not None and len(datastore) < 1:
            raise ValueError("Invalid value for `datastore`, length must be greater than or equal to `1`")

        self._datastore = datastore

    @property
    def cache_reservation(self):
        """
        Gets the cache_reservation of this StorageClass.
        Flash read cache reservation

        :return: The cache_reservation of this StorageClass.
        :rtype: int
        """
        return self._cache_reservation

    @cache_reservation.setter
    def cache_reservation(self, cache_reservation):
        """
        Sets the cache_reservation of this StorageClass.
        Flash read cache reservation

        :param cache_reservation: The cache_reservation of this StorageClass.
        :type: int
        """

        self._cache_reservation = cache_reservation

    @property
    def disk_stripes(self):
        """
        Gets the disk_stripes of this StorageClass.
        Number of disk stripes per object

        :return: The disk_stripes of this StorageClass.
        :rtype: int
        """
        return self._disk_stripes

    @disk_stripes.setter
    def disk_stripes(self, disk_stripes):
        """
        Sets the disk_stripes of this StorageClass.
        Number of disk stripes per object

        :param disk_stripes: The disk_stripes of this StorageClass.
        :type: int
        """

        self._disk_stripes = disk_stripes

    @property
    def force_provisioning(self):
        """
        Gets the force_provisioning of this StorageClass.
        Force provisioning

        :return: The force_provisioning of this StorageClass.
        :rtype: bool
        """
        return self._force_provisioning

    @force_provisioning.setter
    def force_provisioning(self, force_provisioning):
        """
        Sets the force_provisioning of this StorageClass.
        Force provisioning

        :param force_provisioning: The force_provisioning of this StorageClass.
        :type: bool
        """

        self._force_provisioning = force_provisioning

    @property
    def host_failures_to_tolerate(self):
        """
        Gets the host_failures_to_tolerate of this StorageClass.
        Number of failures to tolerate

        :return: The host_failures_to_tolerate of this StorageClass.
        :rtype: int
        """
        return self._host_failures_to_tolerate

    @host_failures_to_tolerate.setter
    def host_failures_to_tolerate(self, host_failures_to_tolerate):
        """
        Sets the host_failures_to_tolerate of this StorageClass.
        Number of failures to tolerate

        :param host_failures_to_tolerate: The host_failures_to_tolerate of this StorageClass.
        :type: int
        """

        self._host_failures_to_tolerate = host_failures_to_tolerate

    @property
    def iops_limit(self):
        """
        Gets the iops_limit of this StorageClass.
        IOPS limit for object

        :return: The iops_limit of this StorageClass.
        :rtype: int
        """
        return self._iops_limit

    @iops_limit.setter
    def iops_limit(self, iops_limit):
        """
        Sets the iops_limit of this StorageClass.
        IOPS limit for object

        :param iops_limit: The iops_limit of this StorageClass.
        :type: int
        """

        self._iops_limit = iops_limit

    @property
    def object_space_reservation(self):
        """
        Gets the object_space_reservation of this StorageClass.
        Object space reservation

        :return: The object_space_reservation of this StorageClass.
        :rtype: int
        """
        return self._object_space_reservation

    @object_space_reservation.setter
    def object_space_reservation(self, object_space_reservation):
        """
        Sets the object_space_reservation of this StorageClass.
        Object space reservation

        :param object_space_reservation: The object_space_reservation of this StorageClass.
        :type: int
        """

        self._object_space_reservation = object_space_reservation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StorageClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
