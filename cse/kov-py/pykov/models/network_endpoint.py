# coding: utf-8

"""
    API Specification for the Kubernetes on vSphere (KOV)

    # RESTful API for the Kubernetes on vSphere (KOV) 

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NetworkEndpoint(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cidr=None, gateway=None, dns_domain=None, dns_nameservers=None, mac_address=None):
        """
        NetworkEndpoint - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cidr': 'str',
            'gateway': 'str',
            'dns_domain': 'list[str]',
            'dns_nameservers': 'list[str]',
            'mac_address': 'str'
        }

        self.attribute_map = {
            'cidr': 'cidr',
            'gateway': 'gateway',
            'dns_domain': 'dnsDomain',
            'dns_nameservers': 'dnsNameservers',
            'mac_address': 'macAddress'
        }

        self._cidr = cidr
        self._gateway = gateway
        self._dns_domain = dns_domain
        self._dns_nameservers = dns_nameservers
        self._mac_address = mac_address

    @property
    def cidr(self):
        """
        Gets the cidr of this NetworkEndpoint.
        the ipv4 cidr in network/prefix format

        :return: The cidr of this NetworkEndpoint.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """
        Sets the cidr of this NetworkEndpoint.
        the ipv4 cidr in network/prefix format

        :param cidr: The cidr of this NetworkEndpoint.
        :type: str
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")
        if cidr is not None and not re.search('^([0-9]{1,3}\\.){3}[0-9]{1,3}(/([0-9]|[1-2][0-9]|3[0-2]))?$', cidr):
            raise ValueError("Invalid value for `cidr`, must be a follow pattern or equal to `/^([0-9]{1,3}\\.){3}[0-9]{1,3}(/([0-9]|[1-2][0-9]|3[0-2]))?$/`")

        self._cidr = cidr

    @property
    def gateway(self):
        """
        Gets the gateway of this NetworkEndpoint.
        ip address of the gateway

        :return: The gateway of this NetworkEndpoint.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this NetworkEndpoint.
        ip address of the gateway

        :param gateway: The gateway of this NetworkEndpoint.
        :type: str
        """
        if gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")

        self._gateway = gateway

    @property
    def dns_domain(self):
        """
        Gets the dns_domain of this NetworkEndpoint.
        list of dns search domains

        :return: The dns_domain of this NetworkEndpoint.
        :rtype: list[str]
        """
        return self._dns_domain

    @dns_domain.setter
    def dns_domain(self, dns_domain):
        """
        Sets the dns_domain of this NetworkEndpoint.
        list of dns search domains

        :param dns_domain: The dns_domain of this NetworkEndpoint.
        :type: list[str]
        """

        self._dns_domain = dns_domain

    @property
    def dns_nameservers(self):
        """
        Gets the dns_nameservers of this NetworkEndpoint.
        list of dns name servers

        :return: The dns_nameservers of this NetworkEndpoint.
        :rtype: list[str]
        """
        return self._dns_nameservers

    @dns_nameservers.setter
    def dns_nameservers(self, dns_nameservers):
        """
        Sets the dns_nameservers of this NetworkEndpoint.
        list of dns name servers

        :param dns_nameservers: The dns_nameservers of this NetworkEndpoint.
        :type: list[str]
        """

        self._dns_nameservers = dns_nameservers

    @property
    def mac_address(self):
        """
        Gets the mac_address of this NetworkEndpoint.
        macaddress to assign to the nic

        :return: The mac_address of this NetworkEndpoint.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this NetworkEndpoint.
        macaddress to assign to the nic

        :param mac_address: The mac_address of this NetworkEndpoint.
        :type: str
        """

        self._mac_address = mac_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NetworkEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
