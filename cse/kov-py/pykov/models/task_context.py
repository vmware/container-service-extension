# coding: utf-8

"""
    API Specification for the Kubernetes on vSphere (KOV)

    # RESTful API for the Kubernetes on vSphere (KOV) 

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaskContext(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cluster_name=None, timeout=None, cause=None, log=None):
        """
        TaskContext - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cluster_name': 'str',
            'timeout': 'int',
            'cause': 'str',
            'log': 'str'
        }

        self.attribute_map = {
            'cluster_name': 'clusterName',
            'timeout': 'timeout',
            'cause': 'cause',
            'log': 'log'
        }

        self._cluster_name = cluster_name
        self._timeout = timeout
        self._cause = cause
        self._log = log

    @property
    def cluster_name(self):
        """
        Gets the cluster_name of this TaskContext.

        :return: The cluster_name of this TaskContext.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """
        Sets the cluster_name of this TaskContext.

        :param cluster_name: The cluster_name of this TaskContext.
        :type: str
        """
        if cluster_name is not None and len(cluster_name) > 63:
            raise ValueError("Invalid value for `cluster_name`, length must be less than or equal to `63`")
        if cluster_name is not None and len(cluster_name) < 3:
            raise ValueError("Invalid value for `cluster_name`, length must be greater than or equal to `3`")
        if cluster_name is not None and not re.search('^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$', cluster_name):
            raise ValueError("Invalid value for `cluster_name`, must be a follow pattern or equal to `/^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/`")

        self._cluster_name = cluster_name

    @property
    def timeout(self):
        """
        Gets the timeout of this TaskContext.

        :return: The timeout of this TaskContext.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this TaskContext.

        :param timeout: The timeout of this TaskContext.
        :type: int
        """

        self._timeout = timeout

    @property
    def cause(self):
        """
        Gets the cause of this TaskContext.

        :return: The cause of this TaskContext.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """
        Sets the cause of this TaskContext.

        :param cause: The cause of this TaskContext.
        :type: str
        """

        self._cause = cause

    @property
    def log(self):
        """
        Gets the log of this TaskContext.

        :return: The log of this TaskContext.
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """
        Sets the log of this TaskContext.

        :param log: The log of this TaskContext.
        :type: str
        """

        self._log = log

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaskContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
